/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EmbeddedBrowser.java
 *
 * Created on Jul 21, 2011, 12:07:29 PM
 */

package com.github.couchapptakeout.ui;

import java.awt.BorderLayout;
import java.awt.Component;
import java.lang.reflect.InvocationTargetException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.commons.lang.ClassUtils;
import org.apache.commons.lang.SystemUtils;
import org.apache.commons.lang.reflect.MethodUtils;

/**
 *
 * @author ryan
 */
public class EmbeddedBrowser extends javax.swing.JFrame {

    Object browser;

    /** Creates new form EmbeddedBrowser */
    public EmbeddedBrowser() {
        initComponents();
        try {

            Object browserType = null;
            // we do this via reflection! Saves having to include the maven stuff
            Class factory = ClassUtils.getClass("com.teamdev.jxbrowser.BrowserFactory");
            System.out.println("Factory: " + factory);
            if (!SystemUtils.IS_OS_MAC_OSX) {
                // always use FF
                Class browserTypeClazz = ClassUtils.getClass("com.teamdev.jxbrowser.BrowserType");
                browserType = MethodUtils.invokeStaticMethod(browserTypeClazz, "valueOf", "Mozilla");
                browser = MethodUtils.invokeStaticMethod(factory, "createBrowser", browserType);

            } else {
                browser = MethodUtils.invokeStaticMethod(factory, "createBrowser", null);
            }
            System.out.println("Browser Type: " + browserType);
            Component c = (Component) MethodUtils.invokeMethod(browser, "getComponent", null);
            System.out.println("Browser : " + MethodUtils.invokeMethod(browser, "getType", null));


            jPanel1.add(c, BorderLayout.CENTER);

        } catch (Exception ex) {
            Logger.getLogger(EmbeddedBrowser.class.getName()).log(Level.SEVERE, null, ex);
        }

        
    }


    public void setUrl(String url) {
        try {
            MethodUtils.invokeMethod(browser, "navigate", url);
            MethodUtils.invokeMethod(browser, "waitReady", null);
            System.out.println("Document is loaded completely");  
        } catch (Exception ex) {
            Logger.getLogger(EmbeddedBrowser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmbeddedBrowser().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

}
